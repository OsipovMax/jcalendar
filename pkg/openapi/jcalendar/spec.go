// Package jcalendar provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package jcalendar

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+yWT2/bPAzGv4rB9z0acZp1F9/6d/A2NEXSXlbkoFmMq86WNIruEAT+7oPkBHVSZx3a",
	"dKecIogyH/LBj0SWkJvKGo2aHaRLcPk9ViIcL4gMTdBZox36C0vGIrHCEJ6y4DqceGERUlCasUCCJoYb",
	"xSV2Qo5J6QKaJl7fmO8PmLN/m2lb861Dei5xUQlV9qSJ4VKR4ytRYW/0q/hD8EZV+M1oHM/nDrmv/r4q",
	"xz+6TjwP17yzizNCwXjCvdW8tsXsvN/5N7Yew62Vu6rt88W3PMEdiEjBwv/+TziHFP5LnlhLVqAlHed6",
	"BPyV0nPjs+RGs8h9YU0MEl1OyrIyGlL4fCZK1FJQdHKdQQzc8gfTX6IokKLt+COSa788Ggx9G8aiFlZB",
	"Ch8Gw8ERxGAF34cmktohhZM1LtiyqT1Brkm7yD+LfK1UiRAKWSmcMwkpXBsX+nQQA+HPGh2fGrlYt4Y6",
	"JBfWlioPXyUPziush/IlJ58GqQm+0QrYUPtoONybUGcWgtCmH+Mv3tDj0WhvepuLqEfyynB0aWotvfLH",
	"PXb6onKmGUmLMpoiPSJF4YMAsqurStAC0jAiW2CwKBykd+CZgZl/3lKWLNHvg8bXVeBbYPuELWvtfvE4",
	"k6iQA8l321lDNly9VP7G0w8x6LBJYB3y1CpCCSlTjXHHxO1NMXtH/LorZzd//5KCUyGjSTvRrfbxgf1X",
	"sK/kHsHP5F9Rn533I6/kgfcD7+/Bu38fErRM1lRCCon/89HMmt8BAAD//+IX3uGPCwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
