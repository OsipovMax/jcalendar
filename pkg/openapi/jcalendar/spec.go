// Package jcalendar provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package jcalendar

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZUW/iOBD+K5HvHrOl29t7yVt32664W21Ru9VKV6GTGw/Ue4ntHU/gUJX/frITSgIO",
	"0AOqVupLoTGezzP+vvFneGCpzo1WoMiy5IHZ9B5y7t9+QuAE4nwCitz/BrUBJAl+tH/m/tLMAEuYVARj",
	"QFaW8fyRvvsBKbEynse5sYC7hDlH1HgF1mhlYTXQNXEqbChYzL5JyqAxZAmlGnfAuHSv4GcBNpD1GSfu",
	"Xn9FGLGE/dJbVK9Xl67XV6agqmrrELoS2QbisqAtMOxmEEmQ2yehPYJxRD4Lo18gwHephJ6uIl+gzgNb",
	"4TYpy7bco0X83crYWGfpgBo7txLPs1hjmK8xOwPiMrPBzDpT7tsBygmnJjfvtM6Aq2r4CgxwCo8OOJJM",
	"peG1ch+3cnVx7R17Uql9ScLSPc+5zMIJS7T0lecQHP3C1wwOuLVTjaKDIjn8pRVcjkYWaNvG0VcTSXBj",
	"RF3opQZkT9MUDIEIlXlTvB0bRWNhQaim8sKMhFMKluogdO0ItoHGHWyLWZV5MIFQMb7pf0AN+CzTXKxW",
	"w48+JdJuraO1GN88nEh2Pze81AKLdo+kGmkXJNWKeOpQypgJsClKQ1IrlrA/PvEMlOAYnQ76LGZUnXzs",
	"esrHY8BoeXwCaKuZ74+OXWm0AcWNZAn77ej46D2LmeF073PowWTuEoyukmyDnwpho+pDkVsr5tyP+Kjo",
	"3/cFS9hA24rTlsUMq5J91GI2z61mOzcmk6mf1vthtVrYk02VbJ3hpa8d1rvtl39yfLw3rJZL8lDtolz+",
	"6cr64eRkf9m1jFAA8kYZ1ClYy+8yiM4VSfJt//c9pr1xEX1FgIpn0TXgBDDyEzyzbZHnHGcsqV3KEleI",
	"jy1LblnNtqGbUlOv9yBF6VY2hgD9roAKVDUD1xLwM9T86wtPcOQ5EKCDXQ46p7MARXLkaqWROSmyxCuD",
	"xUz5s4xJUbNZojtLCAuIG8VcbkvDA3Ky7TC7SfmcfPjIRfQoSYf94fmwv2qKLnShxMtVwTYikN4vLFRg",
	"ioAKqkPVicp9OLLVtWilBRdUuY8tJFBHOpAE9t/9Q/7s7RB4sYeA3yipxjVVIz2quduQQf2gkkGmx1Lt",
	"x4V88aG2peG/76bT6TsX8V2BGahUi+rWsKhW2/VB5w3JdF9zyqaEbusYjRnDoDdsq+6QXG+b506yv2Kz",
	"UVjfCNcSrBEm4ne6oMjNCpLsxoc7TK9rXjqep8fVF5S3FvcE6nnGOH50sM9Tp8G93oN7+VuKsnHnWut5",
	"V+kICshGI42RNZC6czvM0M9QEdT96YvHa9laR1ClstkP1Fk8yRTEy2B3MJaqOhUIcMKzOdbPAnC2ABuh",
	"zndDAiW2wCGZZS/L6ds3q/9KrH7ritpWrVOq19VU0n20UE7whJr6L63/T1sYIUBUTfeQOYAzX6G28L0G",
	"2aIZLF2QbYd06qzs7XCtgJa/yV7YpqWfHg6prMBvDG/qeh3qSjNt/eHXyfW5qOY6GnpE60NXHC8wYwnr",
	"cSNZOSz/CwAA//9cZQALJh0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
