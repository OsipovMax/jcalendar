// Package jcalendar provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package jcalendar

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZ3W7bOBN9FYHfd6nEabZ747u0SQrvFo2RNCiwgbFgxLHDrkSyw5G9RuB3X5CSY8mm",
	"bDm2gwTITX5Maw5n5pzhIfTIEp0ZrUCRZd1HZpMHyLj/8zMCJxAXY1Dk/jeoDSBJ8Ku9c/eTpgZYl0lF",
	"MAJks1k8/0jf/4SE2Cyex7m1gLuEuUDUeA3WaGVhNdANccptKFjMvktKobJkCaUaNcC4dK/hVw42kPU5",
	"J+5+/x9hyLrsf51F9Tpl6To9ZXIqqrYOoSmRNhBXObXAsJtBJEFmt0J7AuOIfBpGv0SAH1IJPVlFvkSd",
	"BVrhmpSmLXu0iL9bGSv7nDmgSudW4nkWawzzNWbnQFymNphZY8o920c55lTl5r3WKXBVLF+DAU7h1T5H",
	"kok0vFTuUytXN1fvWMxukgcQeQrXeVAWW/XC1yys7YuMyzRcEYmWvvEsjP6Vr1nsc2snGkXDvjP4Syu4",
	"Gg4tUNvJ0lNjSXBrRNmJpQllz5IEDIEI9WFTvB0nSWVjQaiqNMOUhTMKlqrkczvt+/4+m+UNkjkM+9sn",
	"sy9VxKzoULDQzU0La2Ztz54rqKYOrBXaZi1tnfh3/Q+oPp+mmovV1P3qNpF2G/61zfjx7zqy+8lf0Gt1",
	"0+4jqYbaBUm0Ip44lFnMBNgEpSGpFeuyPz7zFJTgGJ31eyxmVHgXdjPhoxFgtLw+BrTFkx+OT1xptAHF",
	"jWRd9tvxyfEHFjPD6cHn0IHx3OcZXSRZBz8TwkbFlyK3V8y4X/FR0f/dE6zL+toWQ8eymGFRsk9aTOe5",
	"leOIG5PKxD/W+Wm1WhjMTZWsubCZrx2W3fbbPz052RtWzed6qHpRrv50Zf14erq/7GpWNgB5qwzqBKzl",
	"9ylEF4ok+RH1+x7T3riJniJAxdPoBnAMGPkHPLNtnmUcp6xb+swlrhAfWda9YyXbBu6RknqdRylmbmcj",
	"CNDvGihHVTJwLQG/QMm/nvAER54BATrY5aBzOgtQJIeuVhqZkyLremWwmCk/A5kUJZslusOeMIe4Uszl",
	"sTQ4ICfrd4RmUr4kHz5xET1J0mF/fDnsb5qiS50r8XpV0EYE0hu6hQpMHlBBcag6UbkvR7a42K6M4JwK",
	"e9hCAmWkA0lg/9M/ZKDfD4FXewj4Rkk1Kqka6WHJ3YoMyg8KGaR6JNV+XMhXH6otDf89mkwmRy7iUY4p",
	"qESL4lq3qFbd9UGj4zbN99BZVUJ3ZYzKE4OgN6yr7pBcr5vnRrK/YbORWz8I1xKsEibi9zqnyD0VJNmt",
	"D3eYWVe9dLzMjCsvKO8jbgvqecY4fjSwz1Onwr3Oo/v1txSzyp1rreddpSMoIBsNNUbWQOLO7TBDv0BB",
	"UPejJ56uZWsdQZHKZj9QZrGVKYiXwe5hJFVxKhDgmKdzrF854HQBNkSd7YYESrTAIZmmr8vp23er/0as",
	"fu2KWletU6rX1UTSQ7RQTvCEmvjXDs8ZC0MEiIrHPWQG4MxXaCz8KEFaDIOlC7JtkE6Zlb0brBXQ8ruI",
	"hW1aenl0SGUF3hK9q+ttqCtJtfWHXyPX56Ka62jgEa0PXXA8x5R1WYcbyWaD2X8BAAD//0B7k5LoHgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
