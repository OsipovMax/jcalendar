// Package jcalendar provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package jcalendar

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZ308bORD+V1a+e1wI5XoveaMFqtxVJYKiSldFlVlPgnu7trFnk8uh/O+Vf4TsJt5k",
	"CQkCiZckYHvGM/6+zzO79ySThZICBBrSvScmu4WCup8fNVAEdjYGgfZvpaUCjRzcaO/UfuJUAekSLhBG",
	"oMlslhINdyXXwEj3u500SOeT5M1PyJDM0rnlawN6t4bPtJb6EoySwsCq6SukWJqY+ZR85ZhDZcig5mK0",
	"4thPS+emopuwCbuEuxJMJG+nFKn9/l3DkHTJb51F/jsh+Z2eUCX6vC/7d8vXeG0KvY3bixK39Gs2O+YI",
	"hXnUDh6cUa3ptP2OzjXANy6YnKzu5lzLInLI9vjzfPPpu+Vh8nrXTzuJSgjxsGcpqYBkxYcjmNRxKqXk",
	"FJDy3EQT0ZihnulrPqZYJcmNlDlQ4YcvQQHF+GifauQZVzTIzAMaVjdXP/SUXGW3wMocLssoP7c5urSS",
	"oEU2qiFW4omds8t9XL7OCsrzeGa5NviFFvEoPtM1g31qzERq1hB/Af9IARfDoQFsIZ6LjVTcpmHnFWcr",
	"puOpGHOEa8UCMpbE3JxkGSgEFsPFsqgvJm/y9ER5rWy5taxUtSlOOGAnGD2hgLZ26udgtTVJGxi/H/K2",
	"D2ZXpE6JP7Z4pleLhLRyMtW1aVwPtlODSqiPBMa2YtF0zGtFZLNO7DC76yWmha58lf+C6NNpLilbTasb",
	"bVGtuWmN5p92Sdd22FpGQpa8Bu22+rUIfHrd6SnbLhw7jYuhtIYzKZBm1vMsJQxMprlCLgXpkr8+0hwE",
	"ozo56fdIStDX2uRqQkcj0Mny+Bi08SvfHR7ZyKQCQRUnXfLH4dHhO5ISRfHWxdWB8bx3UdIHXnd+wphJ",
	"/KTE7lUX1I04q9r97jHSJX1pvLpb7mufxg+STeexBd2nSuU8c8s6P40Ui6ZpU3ZrfcFs5lPsAei2f3x0",
	"tDNftd7Nuaon5eJvm9b3x8e7i67WekVcXgulZQbG0JsckjOBHN1V8OcOw964iZ5A0ILmyRXoMejELXBo",
	"N2VRUD0l3dDRLGEF6chYIgS0DeySAL3OPWczu7MRROB3CVhqERC4FoCfIOCvxxzANS0AQVu3y0bncGYg",
	"kA9trtzdxe2YZQZJiXDXAOGMVJmMuoS0ksxl+RzsEZP1DrUZlM+Jhw+UJQ+UtL7fP5/vLxKTc1kK9nJZ",
	"0IYE3N1kCxaoMsICf+tZUtnJifFPT1YkuER/L7agQLC0JwrsXv1j3cueL4F6qfF2CzwK/y55XIwCVhM5",
	"DOCt8CD8w/MglyMudlOGfHam2uLwv4PJZHJgLR6UOgeRSebb7UW26qUgNHYdqvk5w1JBCKGSf1gRLw7r",
	"tNsn2OsFfSPYX1e1Udpa3MPL/txU5VaMJPRGlpg4AzGIXTtz+5G6ah/yPHVu6FneBO4RwHOIsfhoib3O",
	"vf36wdms0nKtLXlX4QgC0CRDqROjILPXdhyhn8AD1H702ENXtrYg8KFsLgdCFI+qCdJlZzcw4sLfCQh6",
	"TPO5r7sS9HThbOifMj3BEwjWwg/6x1gvqNA3b5X+K6n0ax1qnbWWqY5XE463yYI50UZg4l5YbSMLQw2Q",
	"+OXOZQFgS6+YLHwLTlqIwVJ/bBqoE6Iy3wdrCdT6jdUqhSvhmcTw/6FhJxMufoThl0HkyOvMNzK/DjJn",
	"uTTurm2k1pzDc9oOnEfjTHtKlTonXdKhipPZYPYrAAD//zqr1iAqIgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
