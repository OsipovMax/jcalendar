// Package jcalendar provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package jcalendar

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZX28auRf9KiP/fo/TkGa7L7ylTVKxWzUoaVRpI1Q54wtxd8Z2rz2wbMR3X/kPYQY8",
	"MASIEikvgWDmHt97z7k+Fg8kk4WSAoTRpPtAdHYPBXVvPyFQA+x8DMLY/xVKBWg4uNXemf1rpgpIl3Bh",
	"YARIZrN0/pG8+wmZIbN0HudGA+4S5hxR4hVoJYWG1UDXhppSx4Kl5Bs3OVSWtEEuRg0wNt0r+FWCjmR9",
	"Rg21r/9HGJIu+V9nUb1OKF2nJ1RpfNXWITQl0gbisjQtMPRmEG6g0FuhPYJRRDqNo18gwHcumJysIl+g",
	"LCKtsE3K85Y9WsTfrYyVfc4sUKVzK/EciyXG+ZqSMzCU5zqaWWPKPd1HPqamys07KXOgwi9fgQJq4qt9",
	"ioZnXNGg3MdWrm6u3rGUXGf3wMocrsqoLLbqhatZXNvnBeV5vCIctflKizj6F7pmsU+1nkhkDfsu4C8p",
	"4HI41GDaTpaeGHMDN4qFTixNKH2aZaAMsFgfNsXbcZJUNhaFqkozTlk4NdFSBT63077r75NZ3iCZw7C/",
	"fTL7UkVKfIeihW5uWlwza3v2VEE1dWCt0DZraevEv8m/QfTpNJeUrabuVreJtNvwr23GjX+fDfOq28Wq",
	"2NbubiE8T1fj24+4GEobJJPC0MyizFLCQGfIleFSkC754xPNQTCKyWm/R1JivAki1xM6GgEmy+tjQO2f",
	"fH90bLOQCgRVnHTJb0fHR+9JShQ19y6HDoznhlFJn2Qd/JQxnfgvJXavWFC34qKie99jpEv6UvvppUlK",
	"0Jfso2TTeW5hrlGlcp65xzo/tRQLp7qpkjU7N3O1w0Abt/2T4+O9YdUMs4OqF+XyT1vWDycn+8uu5okj",
	"kDdCocxAa3qXQ3IuDDdu1v2+x7Q3bqInDKCgeXINOAZM3AOO2bosCopT0g2GdYkrho406d6SwLaBfSRQ",
	"r/PA2czubAQR+l2BKVEEBq4l4GcI/OsxR3CkBRhAC7scdE5nBsLwoa2VRGKlSLpOGSQlwg1TwllgM0fr",
	"GgyWkFaKuTzfBgfkZP2y0UzK5+TDR8qSR0la7A/Ph/1VmuRCloK9XBW0EQF3Z9RCBaqMqMCfZ1ZU9suJ",
	"9jfklRFcGn/itZBAiHQgCex/+sec+IEPgbqJeDsFtuK/Kx4Xo8DVRA4DeSs6CB94HeRyxMV+bMgXF6ot",
	"D/95N5lM3tmI70rMQWSS+Qviolp12weN3l0132hnVQ3dhhiVJwZRc1iX3SHJXrfhjWR/xW6j1G4SriVY",
	"JUxC72RpEvtUlGQ3Ltxhhl311vE8TjfcUN5G3BbUc4yx/Ghgn6NOhXudB/vyg7NZ5dK11vSu0hEEGJ0M",
	"JSZaQWYP7jhDP4MnqP3TY4/3srWWwKey2RCELLZyBeky2B2MuPCnggEc03yO9asEnC7AhiiL3ZBAsBY4",
	"huf5y7L6+s3rvxKvX7uj1lVrlep0NeHmPlkoJ3pCTdwPGE8ZC0MESPzjDrIAsOYrNha+B5AWw2Dphqwb",
	"pBOy0reDtQJq/avGqoQr6elE83+hYScTLn6E5Zch5MjPW29ifh1iznKp3VnbKK25hueyHThE7UJ7SZWY",
	"ky7pUMXJbDD7LwAA//9opy4foR8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
