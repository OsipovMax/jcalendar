// Package jcalendar provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package jcalendar

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZ308bORD+V1a+e1wI5XoveaMFqtxVJYKiSldFlVlPgnu7trFnk8uh/O+Vf4TsJt5k",
	"CQkCiRdYsD3jGX/f55nde5LJQkkBAg3p3hOT3UJB3eNHDRSBnY1BoP1baalAIwc32ju1P3GqgHQJFwgj",
	"0GQ2S4mGu5JrYKT73U4apPNJ8uYnZEhm6dzytQG9W8NnWkt9CUZJYWDV9BVSLE3MfEq+csyhMmRQczFa",
	"ceynpXNT0U3YhF3CXQkmkrdTitT+/l3DkHTJb51F/jsh+Z2eUCX6vC/7d8vXeG0KvY3bixK39Gs2O+YI",
	"hXnUDh6cUa3ptP2OzjXANy6YnKzu5lzLInLI9vjzfPPpu+Vh8nrXTzuJSgjxsGcpqYBkxYcjmNRxKqXk",
	"FJDy3EQT0ZihnulrPqZYJcmNlDlQ4YcvQQHF+GifauQZVzTIzAMaVjdXP/SUXGW3wMocLssoP7c5urSS",
	"oEU2qiFW4omds8t9XL7OCsrzeGa5NviFFvEoPtM1g31qzERq1hB/Af9IARfDoQFsIZ6LjVTcpmHnFWcr",
	"puOpGHOEa8UCMpbE3JxkGSgEFsPFsqgvJm/y9ER5rWy5taxUtSlOOGAnGD2hgLZ26udgtTVJGxi/H/K2",
	"D2ZXpE6JP7Z4pleLhLRyMtW1aVwPtlODSqiPBMa2YtF0zGtFZLNO7DC76yWmha58lf+C6NNpLilbTasb",
	"bVGtuWmN5p92Sdd22FpGQpa8Bu22+rUIfHrd6SnbLhw7jYuhtIYzKZBm1vMsJQxMprlCLgXpkr8+0hwE",
	"ozo56fdIStDX2uRqQkcj0Mny+Bi08SvfHR7ZyKQCQRUnXfLH4dHhO5ISRfHWxdWB8bx3UdIHXnd+wphJ",
	"/KTE7lUX1I04q9o99xjpkr40Xt0t97VP4wfJpvPYgu5TpXKeuWWdn0aKRdO0Kbu1vmA28yn2AHTbPz46",
	"2pmvWu/mXNWTcvG3Tev74+PdRVdrvSIur4XSMgNj6E0OyZlAju4q+HOHYW/cRE8gaEHz5Ar0GHTiFji0",
	"m7IoqJ6SbuholrCCdGQsEQLaBnZJgF7nnrOZ3dkIIvC7BCy1CAhcC8BPEPDXYw7gmhaAoK3bZaNzODMQ",
	"yIc2V+7u4nbMMoOkRLhrgHBGqkxGXUJaSeayfA72iMl6h9oMyufEwwfKkgdKWt/vn8/3F4nJuSwFe7ks",
	"aEMC7m6yBQtUGWGBv/UsqezkxPi3JysSXKK/F1tQIFjaEwV2r/6x7mXPl0C91Hi7BR6Ff5c8LkYBq4kc",
	"BvBWeBD+4XmQyxEXuylDPjtTbXH438FkMjmwFg9KnYPIJPPt9iJb9VJQrXubUBqbmqLFq9CHmenCYrxE",
	"rJNvn5Cvl/WNkH9dNYdNdACZfdxU61aMJPRGlpg4AzGgXTtz+xG8ajfyPNVu6FzeZO4RwHOIsfhoiT13",
	"zVd6rrU17yoSQQCaZCh1YhRk9t6Og/MTeGz22ENLtrYa8BHsvBZIl/3cwIgLfxcg6DHN527uStDThZ+h",
	"f7v0BE8gWAs/6F9fvaAC37xV+K+kwq91pnWyWoI6Sk043rqnH4450QZg4j5UbaMGQw2Q+OXOZQFgS66Y",
	"GnwLTlrowFJfbBqoE6Iy3wdrCdT6S9UqhSvhmcTw/6FhJxMufoThl0HkyGfMNzK/DjJnuTTuim2k1pzD",
	"c9oOnEfjTHtKlTonXdKhipPZYPYrAAD//yo0X88iIgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
