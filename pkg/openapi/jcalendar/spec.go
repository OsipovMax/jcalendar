// Package jcalendar provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package jcalendar

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZUU8bORD+KyvfPS6Ecr2XvNECVe6qEkFRpUNRZdaT4N6uvR3PJpdD+e+VvQ7ZTbzJ",
	"hgQEEi8kxNn5PDPfN/6s3LNEZ7lWoMiw7j0zyR1k3L39iMAJxNkYFNn/c9Q5IElwq71T+5emObAuk4pg",
	"BMhms3j+kb79AQmxWTyPc20AdwlzhqjxEkyulYHVQFfEqTChYDH7KimFypIhlGrUAGPTvYSfBZhA1qec",
	"uH39HWHIuuy3zqJ6HV+6Tk/lBZVVW4fQlEgbiIuCWmCYzSCSIDNboT2AcUQ+DaOfI8A3qYSerCKfo84C",
	"rbBNStOWPVrE362MlX3OLFClcyvxHIs1hvkas1MgLlMTzKwx5Z7poxxzqnLzVusUuCqXLyEHTuHVPkeS",
	"icy5V+5DK1c3V+9YzK6SOxBFCpdFUBZb9cLVLKzts4zLNFwRiYa+8CyM/pmvWexzYyYaRcO+M/hHK7gY",
	"Dg1Q28nSU2NJcJ0L34mlCWVOkgRyAhHqw6Z4O06SysaCUFVphikLJxQsledzO+27/j6a5Q2SeRr2t09m",
	"X6qIWdmhYKGbmxbWzNqePVZQTR1YK7TNWto68a/6X1B9Pk01F6upu9VtIu02/GubcePfdmT3k7+k1+qm",
	"7UdSDbUNkmhFPLEos5gJMAnKnKRWrMv++shTUIJjdNLvsZhR6V3Y1YSPRoDR8voY0JRPvjs8sqXROSie",
	"S9ZlfxweHb5jMcs53bkcOjCe+7xcl0nWwU+EMFH5pcjuFTPuVlxUdO97gnVZX5ty6BgWMyxL9kGL6Tw3",
	"P454nqcycY91fhitFgZzUyVrLmzmaoe+2277x0dHe8Oq+VwHVS/Kxd+2rO+Pj/eXXc3KBiCvVY46AWP4",
	"bQrRmSJJbkT9uce0N26ipwhQ8TS6AhwDRu4Bx2xTZBnHKet6n7nEFeIjw7o3zLNtYB/x1OvcSzGzOxtB",
	"gH6XQAUqz8C1BPwEnn894QiOPAMCtLDLQed0FqBIDm2tNDIrRdZ1ymAxU24GMik8myXaw56wgLhSzOWx",
	"NHhCTtbvCM2kfE4+fOAiepCkxX7/fNhfNEXnulDi5aqgjQikM3QLFeRFQAXloWpFZb8cmfJiuzKCCyrt",
	"YQsJ+EhPJIH9T/+QgX47BF7sIeAaJdXIUzXSQ8/digz8B6UMUj2Saj8u5LML1ZaG/x1MJpMDG/GgwBRU",
	"okV5rVtUq+76oNFx58330FlVQjc+RuWJQdAb1lX3lFyvm+dGsr9is1EYNwjXEqwSJuK3uqDIPhUk2bUL",
	"9zSzrnrpeJ4Z5y8obyNuC+o5xlh+NLDPUafCvc69ffkuxaxy51rreVfpCArIREONkckhsed2mKGfoCSo",
	"/dMTD9eytY6gTGWzH/BZbGUK4mWwWxhJVZ4KBDjm6RzrZwE4XYANUWe7IYESLXBIpunLcvrmzeq/Eqtf",
	"u6LWVWuV6nQ1kXQXLZQTPKEm7meHx4yFIQJE5eMOMgOw5is0Fr55kBbDYOmCbBqk47MyN4O1Amr9W8Sq",
	"hCvpmcjI/6FhJxOpvvvllyHkwI9Sb2J+HWJOUm3cWdsorbmG57IdOETjQpeSKjBlXdbhuWSzwexXAAAA",
	"//9wsPsYVx8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
