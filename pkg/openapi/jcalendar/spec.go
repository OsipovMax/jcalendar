// Package jcalendar provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package jcalendar

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZUW8aORD+KyvfPW5Cmuu98JY2ScVd1aCkUaWLUGXWA3Fv13bHXjgu2v9e2WvCLnhh",
	"CRAlUl4Cwex8npnvG38WDySRmZIChNGk+0B0cg8ZdW8/IlAD7GICwtj/FUoFaDi41d65/WtmCkiXcGFg",
	"DEiKIp5/JIc/IDGkiOdxbjXgLmEuECVeg1ZSaFgNdGOoyXUoWEy+cpNCZUkb5GLcAGPTvYafOehA1ufU",
	"UPv6O8KIdMlvnUX1Or50nZ5QuSmrtg6hKZE2EFe5aYGhN4NwA5neCu0RjCLSWRj9EgG+ccHkdBX5EmUW",
	"aIVtUpq27NEi/m5lrOyzsECVzq3EcyyWGOZrTM7BUJ7qYGaNKfd0H/mEmio3h1KmQEW5fA0KqAmv9ika",
	"nnBFvXIfW7m6uXrHYnKT3APLU7jOg7LYqheuZmFtX2SUp+GKcNTmC83C6J/pmsU+1XoqkTXsO4N/pICr",
	"0UiDaTtZemLCDdwq5juxNKH0WZKAMsBCfdgUb8dJUtlYEKoqzTBlgZ2ZYK08oduJ3zX4yTRv0Mxh6N8+",
	"mX3JIiZli8KVbm5bWDXru/ZUTTX1YK3WNstp+9S/yn9B9OkslZStJu9Wt4m02wFQ24w7Anw6pfJ2sSu2",
	"ubvbiJKqq/HtR1yMpA2SSGFoYlGKmDDQCXJluBSkS/76SFMQjGJ01u+RmJjSCJGbKR2PAaPl9QmgLp98",
	"d3xis5AKBFWcdMkfxyfH70hMFDX3LocOTOamUckyyTr4GWM6Kr8U2b1iRt2Ki4rufY+RLulLXU4wTWKC",
	"Zck+SDab5+ZnG1Uq5Yl7rPNDS7Fwq5sqWbN0hasdetq47Z+enOwNq2aaHVS9KFd/27K+Pz3dX3Y1XxyA",
	"vBUKZQJa02EK0YUw3Lhx9+ce0964iZ4wgIKm0Q3gBDByDzhm6zzLKM5I15vWJa4YOtake0c82wb2EU+9",
	"zgNnhd3ZGAL0uwaTo/AMXEvAT+D512OO4EgzMIAWdjnonM4MhOEjWyuJxEqRdJ0ySEyEm6aEM89mjtY5",
	"GMwhrhRzeb4NDsjJ+oWjmZTPyYcPlEWPkrTY758P+4s00aXMBXu5KmgjAu7OqIUKVB5QQXmeWVHZL0e6",
	"vCWvjODclCdeCwn4SAeSwP6nf8iNH/gQqJuIt1NgK/674nEx9lyN5MiTt6ID/0Gpg1SOudiPDfnsQrXl",
	"4X9H0+n0yEY8yjEFkUhWXhIX1arbPmg076r5VltUNXTnY1SeGATNYV12hyR73YY3kv0Vu41cu0m4lmCV",
	"MBEdytxE9qkgyW5duMMMu+qt43mcrr+hvI24LajnGGP50cA+R50K9zoP9uU7Z0Xl0rXW9K7SEQQYHY0k",
	"RlpBYg/uMEM/QUlQ+6fHHu9lay1BmcpmQ+Cz2MoVxMtgQxhzUZ4KBnBC0znWzxxwtgAbocx2QwLBWuAY",
	"nqYvy+rrN6//Srx+7Y5aV61VqtPVlJv7aKGc4Ak1dT9iPGUsjBAgKh93kBmANV+hsfDNg7QYBks3ZN0g",
	"HZ+VvhusFVDrXzZWJVxJT0ea/w8NO5ly8d0vvwwhB37iehPz6xBzkkrtztpGac01PJftwCFqF7qUVI4p",
	"6ZIOVZwUg+JXAAAA///lP1EOpR8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
