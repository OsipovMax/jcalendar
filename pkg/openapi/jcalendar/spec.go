// Package jcalendar provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package jcalendar

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZUU/jOBD+K5bvHiPKcnsveWMXOOXutCBYtNKt0MlNpsWrxPaOJ0UVyn8/2Ulo2jo0",
	"pYDg1JfdUjffeCbf5/kmueepLoxWoMjy+J7b9BYK4T9+RhAE2ekMFLm/DWoDSBL8anLi/qW5AR5zqQim",
	"gLyqovYrPf4BKfEqanGuLeAuMKeIGi/BGq0srANdkaDShsAi/lVSDp0lSyjVtCeMS/cSfpZgA1lngoT7",
	"/1eECY/5L6NF9UZN6UaJMiXVVauqBWLfxodAnpcUwLSbQSVBYbdCfyiJQBTzOtoZAnyTKtN365HOUBeB",
	"0rqi5/nAmi/wdytTZ59+3507sYbnWakxzL+InwAJmdtgZr0pJ/YC5UxQl2tjrXMQql6+BAOCwqsXAkmm",
	"0ohGiQ+3bn1zy3doq1L7koSleFoImYcTlmjpiygguPq3eGTxqyzgH63gfDKxQEO1nqiZJLg2mSDo1WJi",
	"j9MUDEEWKmgItkv0MCHgmIJphNiyWH0aWXqYt4FEPfc64nW1gvvvr0WYCY+W4qk06ct3R/psnbhL+RJ2",
	"Pox95R4JsGsD6cN3X0k10Q4k1YpE6qJUEc/ApigNSa14zP/8LHJQmUB2fJHwiFPdAvnVnZhOAdnq+gzQ",
	"1ld+ODh0WWgDShjJY/7bweHBBx5xI+jW5zCCWWsXjK6TXA5+nGWW1T9ibq9YCL/iUdF/TjIe8wttazVa",
	"HnGsS/ZJZ/M2t0anwphcpv6y0Q/rIrQ+ZVMll5p55WuHTYfx2z86PHy2WEt2yYdaLsr5X66sH4+Oni+7",
	"JUcUCHmtDOoUrBXjHNipIkm+X/z+jGlv3ESiCFCJnF0BzgCZv8Az25ZFIXDO48bOrHCFxNTy+Dtv2Hbj",
	"LmmoN7qXWeV2NoUA/S6BSlQNAx8l4B/Q8C/JPMFRFECALuwqaEvnDBTJiauVRu6kyGOvDB5x5U8xLrOG",
	"zRJdayIsIeoUc/WIunlBTi5bz35SviYfPomMPUjSxf74erG/aGJnulTZ21XBNiIoLeC/Q5TQwWRirEti",
	"oIAsm2hk1kDqCM0cWr9CXD/arBKHMUQjzc63Ekq0GmwMU6mYnjBnBnAm8jbWzxJwvgg2cRZsp0igsgFx",
	"yFmzNyV9u9f+O9H+Us9aFqwTqdfVnaRbtlBO8GiQfnJaNEhTBo6F2jG7KO7HzNaPTtbcWUn1HDagOzZI",
	"L9Qdn98YhgbMvT98s/7Q3yippg1V67PY3cGODJovahk4lWwaUNabYrADuiHl2sO9DBW74+LrULAZLfcM",
	"3IKBnjG1uwn6M0+dDvdG91AImW+2ZgHMNQfm6Vc/dxniv6D5ZeD0bZfehkfpPorZG5T3YVC20sDm2aTn",
	"FGbjOUtOerUwcBDxCG97Qt9L4P8qgTv/Iso+YTafIACrL/fmvwBw5iekhm9NkAFqWHl2ZXuG2Ga+sN9v",
	"HtXI6tupxSP7ldeHLymewHvDvYbeh4bSXFv/BKqX662kWh3d+IjWQ9ccLzHnMR8JI3l1U/0XAAD//zKE",
	"20zKIAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
