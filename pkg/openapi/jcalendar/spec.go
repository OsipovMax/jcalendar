// Package jcalendar provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package jcalendar

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xY0U/juBP+VyL/fo+BstzeS9/YBU69Wy0VLFrpUHUy8bR4L7G940l7Fcr/frKd0qR1",
	"aHtQBBIvu6VuvvFMvm/8je9ZpgujFSiyrH/PbHYHBfcfPyNwAnE2BUXub4PaAJIEvzo4df/S3ADrM6kI",
	"JoCsqtLFV/r2B2TEqnSBc20BnwJzhqjxEqzRysI60BVxKm0MLGXfJOXQWLKEUk06wrh0L+FnCTaS9Skn",
	"7v7/P8KY9dn/esvq9erS9QbKlBSqVlVLxK6NbwN5UVIE024GlQSF3Qn9oSQckc9DtHME+C6V0LP1SOeo",
	"i0hpXdHzfMuaL/GfVqbGPv2+G29iDc+zUmOcfyk7BeIyt9HMOlMe2CHKKacm1261zoGrsHwJBjjFV4cc",
	"SWbS8FqJD69ufXPtN7RTqX1J4lI8K7jM4wlLtPSVFxBd/cIfWRxya2caRQdFCvhTK7gYjy3Qto1goKaS",
	"4NoITtAp1IE9yTIwBCJW7RhsUwVxtsAJRdPYC5U6wDZQrIMJKQvliiYQK8Y3/TeoIZ/nmov1avjVXZCe",
	"JuvWZrywHYGf3qO9DCKbdl9JNdYOJNOKeOaiVCkTYDOUhqRWrM9+/8xzUIJjcjIcsJRROGXY1YxPJoDJ",
	"6voU0IYnPxweudJoA4obyfrsl8Ojww8sZYbTnc+hB9PFiWx0SLId/EQIm4QfJW6vWHC/4lHRfx4I1mdD",
	"bQOnLUsZhpJ90mK+yK1mOzcml5l/rPfDarW0Apsq2TovK187rN+23/7x0dGzxWo5Eh+qXZSLP1xZPx4f",
	"P192LdMRCXmtDOoMrOW3OSRniiT5lvzrM6a9cRMDRYCK58kV4BQw8Q94ZtuyKDjOWb92DCtcIT6xrH/D",
	"araN3CM19Xr3UlRuZxOI0O8SqERVM/BRAv4GNf8GwhMceQEE6MKugi7oLECRHLtaaWROiqzvlcFSpvw5",
	"w6So2SzRNXjCEtJGMVfb0miPnGy7u25SviQfPnGRPEjSxf74crG/akrOdanE61XBLiIoLeBf2yihgZnw",
	"W11SAgrIJmONiTWQOUInDq1bIe482qwSh7GNRuqd7ySUdDXYLUykSvQ4cRYEpzxfxPpZAs6XwcbOxzwp",
	"EiixRRxy/uZVSd++a/+NaL91ZrUF60TqdTWTdJcslRNtDdLPH8sD0pSRthD8tovifpzYcDux5s5KCtPM",
	"FqdjjbSn0/H5jWFsTHv3h6/WH/oXJdWkpmroxe4NNmRQfxFkkOuJVM8zoHzxUNvS8J+D2Wx24BAPSsxB",
	"ZVqEKX9ZrfZACJ0XG6b7dqJqSuimxmg8MYqOjW3V7ZPr7bm6k+xveA5xbXjTBLzuuqIWy5Hs2sPtp9c1",
	"7yNepsfVdxfvLW4H6nnGBPscZZ+nTuDezN8i2//g+scIkITHva0oAFxbjbn+73WQLQz/ylRsO+xx7Vzs",
	"zehRB7B6tbxsiCt3//t0z5FL/3cH/TYcdJZr62fbTq4vJLXQ0chHtB46cLzEnPVZjxvJqlH1bwAAAP//",
	"xUDqvYccAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
