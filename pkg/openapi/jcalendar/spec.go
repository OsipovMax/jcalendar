// Package jcalendar provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package jcalendar

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYW2/bOBP9K8R836MQp9nui97SNll4d9EESYMCWwQLWho7LCSSHY4cGIH++4KkHN+o",
	"2G4uSIG8JLZonbnwnJkh76AwtTUaNTvI78AVN1jL8PEjoWQsT6ao2X+3ZCwSKwyrw0/+L88sQg5KM06Q",
	"oG2z+SMz+o4FQ5vNca4c0mNgTogMXaCzRjvcBLpkyY1LgWXwRXGFS0uOSelJjxkf7gX+aNAloi4lS///",
	"/4RjyOF/g0X2Bl3qBkNtG45Za9sFYp/ju0CeNZzAdNtBFWPt9kK/T4kkkrNo7ZQQvypdmttNS6dk6kRq",
	"fdKrasecL/Afl6YlP4PfSzuxgRdYaSjNvww+IUtVuWRkvSEP3TmpqeRlro2MqVDquHyBFiWnV88lsSqU",
	"lZ0S77du07nVHdor1SElaSme1FJV6YAVOf4sa0yu/i0fWPyiavzHaDwbjx3yrlof6qlivLKlZOzV4tAd",
	"FwVaxjKV0BTsMtHThMBjToaRYsti9efI0sO8LSTq2esMYraS/qdy4Tnw+DIXmJTA94+UHhsPUhjNsvBW",
	"2gxKdAUpy8poyOHPj7JCXUoSx+dDyIBjoYbLWzmZIIn19SmSi2++Ozj0URiLWloFOfx2cHjwDjKwkm9C",
	"DAOczpuaNTHIVePHZelE/JHwvlItw0pApfB5WEIO58ZFzjjIgGLKPphyNo+tY5O0tlJFeG3w3XkL8266",
	"LZMrLacNuaOuDgb3jw4Pn8zWSlMPplaTcvaXT+v7o6Oni26lbydMXmlLpkDn5KhCcaJZcahqvz9h2Fud",
	"GGpG0rISl0hTJBFeCMx2TV1LmkHeNd01rrCcOMi/Qce2a/9KR73BnSpb79kEE/S7QG5Idwx8kIB/YMe/",
	"YRkITrJGRvJm10HndC5Rsxr7XBkCL0XIgzIgAx1KNaiyY7MiX0CZGsyWkrleQa6fkZOrA1I/KV+SDx9k",
	"Ke4l6W2/fznbnw2LU9Po8vWqYB8RNA7p312UsIQp5Mg0LFAjOzE2JJzFwhNaeLR+hfh+tF0lHmMXjXSe",
	"7yWUbN3YCCdKCzMWvsfTVFZzWz8apNnC2NgPCo+yhLrcwQ77AeJVSd+9af8X0f5Kz1oVrBdp0NWt4hux",
	"UE6yNKgw3y8apG0SZSEOtN6K/7Fw8YC/MZ01HE8LO3THDumZuuPTD4apY9DbfPhq58OwUUpPOqrGWux3",
	"cEkG3YMoA6+SbQeUzaaY7ID+kHIV4J6HisvHxZehYHe0fGPgHgwMjInTTXI+C9SJ3LsN92TuJ4ayMSGK",
	"+Hqo+jWiZ31qKPvaGdlhHls7tLie6aVrLO7b9YMFev3ybHFNsna7+ZzDTeJa823A+TUGnKIyLhw9erk+",
	"l9RcR9fBogvQkeMNVZDDQFoF7XX7XwAAAP//INh7smkZAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
